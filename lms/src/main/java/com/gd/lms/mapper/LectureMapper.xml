<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.lms.mapper.LectureMapper">
	

	<!-- 강의하는 과목의 과제 리스트 가져오기 교수	-->
	<select id="selectLectureListPro" parameterType="int" resultType="map">
		SELECT
			  lecture_no lectureNo
			, subject_approve_no subjectApproveNo
			, lecture_title lectureTitle
			, lecture_content lectureContent
			, create_date createDateL
			, update_date updateDateL
			, count countL

		FROM
		lecture 
		WHERE	
			subject_approve_no = #{subjectApproveNo};					
	</select>		
		
		
	<!-- 강의하는 과목의 과제 조회수 -->
	<update id="lectureHit" parameterType="int">
		 UPDATE 
		 	lecture		 	
		 SET
		 	count=count+1
		 WHERE
		 	lecture_no= #{lectureNo}		 			
	</update>


	<!-- 강의하는 과목의 과제 상세보기 -->
	<select id="selectLectureOnePro" resultType="map">
	SELECT
		l.lecture_no lectureNo
		, l.subject_approve_no subjectApproveNo 
		, l.lecture_title lectureTitle
		, l.lecture_content lectureContent
		, l.create_date createDate
		, l.update_date updateDate
		, l.count 
		, lf.lecturefile_no lectureFileNo
		, lf.lecture_filename lectureFilename
		, lf.lecture_originname lectureOriginname
		, lf.lecture_type lectureType
	FROM
		lecture	l 
	LEFT JOIN 
		lecture_file lf
	ON
		l.lecture_no = lf.lecture_no
	WHERE
		l.lecture_no = #{lectureNo}
	</select>
	
	
	
	<!-- 강의하는 과목의 과제 입력하기 -->
	<insert id="insertLectureOne" parameterType="com.gd.lms.vo.Lecture">
	INSERT INTO
		lecture
		(
		subject_approve_no
		, lecture_title
		, lecture_content
		, create_date
		, update_date
		)
		VALUES
		(#{subjectApproveNo}
		,#{lectureTitle}
		,#{lectureContent}
		, now()
		, now()		
		)
	</insert>
	
	
	
	<!-- 과제 첨부를 위해 필요한 No 찾기-->
	<select id="selectLectureNo" parameterType="com.gd.lms.vo.Lecture" resultType="int">
	SELECT
		lecture_no lectureNo		
	FROM
		lecture
	WHERE
		lecture_title = #{lectureTitle}
	AND
		lecture_content = #{lectureContent}	
	AND
		subject_approve_no = #{subjectApproveNo}
	</select>
	
	
	
	
	<!--  강의하는 과목의 과제 파일 첨부하기 -->
	<insert id="insertLecturefile" parameterType="com.gd.lms.vo.LectureFile">
	INSERT INTO
		lecture_file
		(
		lecture_no
		, lecture_filename
		, lecture_originname
		, lecture_type
		, create_date
		, update_date)
		VALUES
		(
		#{lectureNo}
		, #{lectureFilename}
		, #{lectureOriginname}
		, #{lectureType}
		, now()
		, now())
		
	</insert>
	
	
	
	<!-- 강의하는 과목의 과제 수정하기 >>> 본문만 -->
	<update id="updateLectureOne" parameterType="com.gd.lms.vo.Lecture">
	UPDATE
		lecture
	SET
		lecture_title = #{lectureTitle}
		, lecture_content = #{lectureContent}
		, update_date = now()		
	WHERE
		lecture_no = #{lectureNo}	
	</update>
	
	
	<!--  기존 파일 정보 가져오기ㅣ-->
	<select id="selectLectureFileExis" resultType="String"  parameterType="int">
	SELECT
		lecture_filename lectureFileName
	FROM
		lecture_file
	WHERE
		lecture_no = #{lectureNo}	
	
	</select>
	
	
	<!-- 강의하는 과목의 과제 수정하기 >>> 파일디비를 -->
	<update id="updateLectureFile" parameterType="com.gd.lms.vo.LectureFile">
	UPDATE
		lecture_file
	SET
		lecture_filename = #{lectureFilename}
		, lecture_originname = #{lectureOriginname}
		, lecture_type = #{lectureType}
		, update_date = now()
	WHERE
		lecture_no = #{lectureNo}
		
	<!--  쿼리스트링으로 연결받은 lectureNo 를 기준으로 이미지파일 테이블 값 셀렉 -->
	</update>
	

	
	<!-- 강의하는 과목의 과제 삭제하기 -->	
	<delete id="deleteLectureOne" parameterType="int">
	DELETE 
	FROM
		lecture
	WHERE
		lecture_no = #{lectureNo}		
	</delete>
	
	
	<!-- 강의하는 과목의 과제 파일 삭제하기 -->	
	<delete id="deleteLectureFileOne" parameterType="int">
	DELETE 
	FROM
		lecture_file
	WHERE
		lecturefile_no = #{lecturefileNo}		
	</delete>
	
	
	
	
	
	<!--  교수 메뉴 시작  -->
	<!--  교수의 낸 과제 고유넘버당 듣는 학생들의 강의제출일람 확인 -->
	<select id="selectLectureTotalList" parameterType="int" resultType="map">
	SELECT
	DISTINCT 
	sh.student_no studentNo
	, sh.lecture_no lectureNo
	, sh.homework_title homeworkTitle
	, sh.homework_content homeworkContent
	, sh.student_submitck studentSubmitCk
	, sh.pf_homework_no pfHomeworkNo
	, sh.score score
	, l.subject_approve_no	subjectApproveNo
	, sa.subject_no subjectNo
	, sa.professor_no professorNo
	, sa.subject_no subjectNo
	, sa.major_no majorNo
	, s.subject_name subjectName
	, st.student_name studentName
	FROM
		student_homework sh
		RIGHT JOIN
			lecture l
			ON
				sh.lecture_no=l.lecture_no
				RIGHT JOIN
				subject_approve sa
					ON
					l.subject_approve_no = sa.subject_approve_no
						RIGHT JOIN
						subject s
						ON
						sa.subject_no = s.subject_no
							RIGHT JOIN
							student st
								ON
								sh.student_no = st.student_no
						WHERE
						sh.lecture_no = #{letureNo}
	</select>
	
	
</mapper>